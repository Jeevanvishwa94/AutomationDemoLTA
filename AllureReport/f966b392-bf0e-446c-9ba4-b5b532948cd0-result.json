{"name": "test_lta_play[chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"lta-btn lta-location-search__clear-new\" aria-label=\"reset search\">...</button> is not clickable at point (379, 100). Other element would receive the click: <div class=\"lta-mega-nav__sub-nav lta-mega-nav__sub-nav--layout-1 u-px-4 xl:u-px-15 l-grid\">...</div>\n  (Session info: chrome=127.0.6533.89)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7FD069632+30946]\n\t(No symbol) [0x00007FF7FD01E3C9]\n\t(No symbol) [0x00007FF7FCF16FDA]\n\t(No symbol) [0x00007FF7FCF6FEEE]\n\t(No symbol) [0x00007FF7FCF6D962]\n\t(No symbol) [0x00007FF7FCF6AE7B]\n\t(No symbol) [0x00007FF7FCF6A095]\n\t(No symbol) [0x00007FF7FCF5C271]\n\t(No symbol) [0x00007FF7FCF8CA6A]\n\t(No symbol) [0x00007FF7FCF5BBB6]\n\t(No symbol) [0x00007FF7FCF8CC80]\n\t(No symbol) [0x00007FF7FCFAB041]\n\t(No symbol) [0x00007FF7FCF8C813]\n\t(No symbol) [0x00007FF7FCF5A6E5]\n\t(No symbol) [0x00007FF7FCF5B021]\n\tGetHandleVerifier [0x00007FF7FD19F83D+1301229]\n\tGetHandleVerifier [0x00007FF7FD1ABDB7+1351783]\n\tGetHandleVerifier [0x00007FF7FD1A2A03+1313971]\n\tGetHandleVerifier [0x00007FF7FD09DD06+245686]\n\t(No symbol) [0x00007FF7FD02758F]\n\t(No symbol) [0x00007FF7FD023804]\n\t(No symbol) [0x00007FF7FD023992]\n\t(No symbol) [0x00007FF7FD01A3EF]\n\tBaseThreadInitThunk [0x00007FFD6E707374+20]\n\tRtlUserThreadStart [0x00007FFD6EE3CC91+33]", "trace": "self = <testcase.test_play_childrens_lesson.TestPlay object at 0x0000020094F73C20>\n\n    def test_lta_play(self):\n    \n        lta_loginpage = LTAPlay(self.driver)\n        lta_loginpage.set_lta_username(TestData.Username)\n        lta_loginpage.set_lta_password(TestData.Password)\n        lta_loginpage.click_lta_login()\n        lta_loginpage.cookies()\n        element = lta_loginpage.find_element(*lta_loginpage.locate.play)\n        lta_loginpage.hover_over_element(element)\n>       lta_loginpage.childrens_page()\n\ntestcase\\test_play_childrens_lesson.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPageobject\\childrens_lessons.py:35: in childrens_page\n    self.wait_for_element(self.locate.resert_button).click()\nmyenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nmyenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nmyenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000020094F238C0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF7FD01A3EF]\\\\n\\\\tBaseThreadInitThunk [0x00007FFD6E707374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFD6EE3CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"lta-btn lta-location-search__clear-new\" aria-label=\"reset search\">...</button> is not clickable at point (379, 100). Other element would receive the click: <div class=\"lta-mega-nav__sub-nav lta-mega-nav__sub-nav--layout-1 u-px-4 xl:u-px-15 l-grid\">...</div>\nE         (Session info: chrome=127.0.6533.89)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7FD069632+30946]\nE       \t(No symbol) [0x00007FF7FD01E3C9]\nE       \t(No symbol) [0x00007FF7FCF16FDA]\nE       \t(No symbol) [0x00007FF7FCF6FEEE]\nE       \t(No symbol) [0x00007FF7FCF6D962]\nE       \t(No symbol) [0x00007FF7FCF6AE7B]\nE       \t(No symbol) [0x00007FF7FCF6A095]\nE       \t(No symbol) [0x00007FF7FCF5C271]\nE       \t(No symbol) [0x00007FF7FCF8CA6A]\nE       \t(No symbol) [0x00007FF7FCF5BBB6]\nE       \t(No symbol) [0x00007FF7FCF8CC80]\nE       \t(No symbol) [0x00007FF7FCFAB041]\nE       \t(No symbol) [0x00007FF7FCF8C813]\nE       \t(No symbol) [0x00007FF7FCF5A6E5]\nE       \t(No symbol) [0x00007FF7FCF5B021]\nE       \tGetHandleVerifier [0x00007FF7FD19F83D+1301229]\nE       \tGetHandleVerifier [0x00007FF7FD1ABDB7+1351783]\nE       \tGetHandleVerifier [0x00007FF7FD1A2A03+1313971]\nE       \tGetHandleVerifier [0x00007FF7FD09DD06+245686]\nE       \t(No symbol) [0x00007FF7FD02758F]\nE       \t(No symbol) [0x00007FF7FD023804]\nE       \t(No symbol) [0x00007FF7FD023992]\nE       \t(No symbol) [0x00007FF7FD01A3EF]\nE       \tBaseThreadInitThunk [0x00007FFD6E707374+20]\nE       \tRtlUserThreadStart [0x00007FFD6EE3CC91+33]\n\nmyenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "attachments": [{"name": "stdout", "source": "99dc997d-6807-4a36-b9c3-a6faed251145-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "initialize_driver", "value": "'chrome'"}], "start": 1722926962111, "stop": 1722926983432, "uuid": "d836d141-633e-42cb-bea9-bb597b03c38f", "historyId": "6d5de5cf0da286ea4078a107b049323e", "testCaseId": "a650236b1c900c563d81bc47fb61e4a2", "fullName": "testcase.test_play_childrens_lesson.TestPlay#test_lta_play", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('initialize_driver')"}, {"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_play_childrens_lesson"}, {"name": "subSuite", "value": "TestPlay"}, {"name": "host", "value": "VEROLTBLRLT352"}, {"name": "thread", "value": "1816-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_play_childrens_lesson"}]}